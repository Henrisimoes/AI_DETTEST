import subprocess
from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from datetime import datetime


MODELO_OLLAMA = "llama3:8b"


# =========================
# üîπ Fun√ß√µes de apoio üîπ
# =========================

def gerar_descricao_ollama(prompt):
    cmd = ['ollama', 'run', MODELO_OLLAMA]
    try:
        process = subprocess.Popen(
            cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding='utf-8',
            errors='replace',
            text=True
        )
        stdout, stderr = process.communicate(input=prompt, timeout=300)
    except subprocess.TimeoutExpired:
        process.kill()
        print("‚õî Timeout: o processo demorou demais para responder.")
        return None

    if process.returncode != 0:
        print("‚õî Erro ao executar Ollama:", stderr.strip())
        return None
    return stdout.strip()


def configurar_estilo(doc):
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Calibri'
    font.size = Pt(11)


def adicionar_cabecalho(doc):
    section = doc.sections[0]
    header = section.header
    par = header.paragraphs[0]
    par.text = "COORDENADORIA DE TECNOLOGIA DA INFORMA√á√ÉO"
    par.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = par.runs[0]
    run.font.size = Pt(9)
    run.bold = True
    run.font.name = 'Calibri'


def adicionar_rodape(doc):
    section = doc.sections[0]
    footer = section.footer
    p = footer.paragraphs[0]
    p.text = (
        "Av. Dr. H√©lio Ribeiro, n¬∫ 1000, Res. Paiagu√°s ‚Äì Cuiab√°-MT ‚Äì CEP 78048-910 | "
        "Fone: (65) 3615-4811 | cti@detran.mt.gov.br | www.detran.mt.gov.br"
    )
    p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = p.runs[0]
    run.font.size = Pt(8)
    run.font.name = 'Calibri'


def adicionar_conceitos_gerais(doc):
    titulo = doc.add_paragraph("CONCEITOS GERAIS")
    titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = titulo.runs[0]
    run.bold = True
    run.font.size = Pt(14)
    run.font.name = 'Calibri'

    texto = (
        "O Decreto Estadual n¬∫ 1.525/2022 em seu Art. 42 disciplinou que: O termo de refer√™ncia √© o "
        "documento elaborado a partir dos estudos t√©cnicos preliminares, se houver, devendo conter os elementos "
        "necess√°rios e suficientes, com n√≠vel de precis√£o adequado, para caracterizar o objeto da licita√ß√£o, e ainda: "
        "I - defini√ß√£o do objeto, inclu√≠dos sua natureza, os quantitativos, o prazo do contrato e, se for o caso, a "
        "possibilidade de sua prorroga√ß√£o; II - fundamenta√ß√£o da contrata√ß√£o, que consiste na refer√™ncia aos estudos "
        "t√©cnicos preliminares correspondentes ou, quando n√£o for poss√≠vel divulgar esses estudos, no extrato das "
        "partes que n√£o contiverem informa√ß√µes sigilosas; III - descri√ß√£o da solu√ß√£o como um todo, considerando "
        "todo o ciclo de vida do objeto; IV - requisitos da contrata√ß√£o; V - modelo de execu√ß√£o do objeto, que consiste "
        "na defini√ß√£o de como o contrato dever√° produzir os resultados pretendidos desde o seu in√≠cio at√© o seu "
        "encerramento; VI - modelo de gest√£o do contrato, que descreve como a execu√ß√£o do objeto ser√° "
        "acompanhada e fiscalizada pelo √≥rg√£o ou entidade; VII - crit√©rios de medi√ß√£o e de pagamento; VIII - forma e "
        "crit√©rios de sele√ß√£o do contratado; IX - estimativas do valor da contrata√ß√£o, acompanhadas dos pre√ßos "
        "unit√°rios referenciais, das mem√≥rias de c√°lculo e dos documentos que lhe d√£o suporte, com os par√¢metros "
        "utilizados para a obten√ß√£o dos pre√ßos e para os respectivos c√°lculos, que devem constar de documento "
        "separado e classificado; X - adequa√ß√£o or√ßament√°ria; XI - indica√ß√£o dos locais de execu√ß√£o dos servi√ßos e das "
        "regras para recebimento provis√≥rio e definitivo, quando for o caso; XII - especifica√ß√£o da garantia exigida e "
        "das condi√ß√µes de manuten√ß√£o e assist√™ncia t√©cnica, quando for o caso; XIII - formas, condi√ß√µes e prazos de "
        "pagamento, bem como o crit√©rio de reajuste; XIV - principais obriga√ß√µes do contratado e do contratante, "
        "inclusive com a eventual previs√£o da execu√ß√£o de log√≠stica reversa pelo contratado, se for o caso; e XV - "
        "san√ß√µes por descumprimentos das obriga√ß√µes pactuadas, inclusive as obriga√ß√µes pr√©vias ao contrato.\n\n"
        "Em seu ¬ß1¬∫ ainda disciplina que para a defini√ß√£o do objeto, dever√° ser utilizada a especifica√ß√£o do "
        "produto ou servi√ßo existente no cat√°logo de especifica√ß√µes do Sistema de Aquisi√ß√µes Governamentais ou "
        "solicitada a sua inclus√£o quando se tratar de novos produtos ou servi√ßos, observados os requisitos de "
        "qualidade, rendimento, compatibilidade, durabilidade e seguran√ßa. E por fim o ¬ß2¬∫ diz que o termo de "
        "refer√™ncia dever√° ser elaborado por servidor da √°rea t√©cnica, auxiliado pela √°rea de contrata√ß√£o nos aspectos "
        "t√©cnicos de compras p√∫blicas.\n\n"
        "J√° no seu Art. 66 diz que os processos de aquisi√ß√£o de bens e de contrata√ß√£o de servi√ßos e loca√ß√£o "
        "de bens m√≥veis e im√≥veis ser√£o autuados e instru√≠dos em sua fase interna pelo menos com os seguintes "
        "documentos, dentre eles: I - documento de formaliza√ß√£o de demanda com a justificativa para a "
        "contrata√ß√£o, termo de refer√™ncia, projeto b√°sico ou projeto executivo e, se for o caso, estudo t√©cnico "
        "preliminar e an√°lise de riscos.\n\n"
        "Desta forma, o presente documento visa ao levantamento de informa√ß√µes para elabora√ß√£o das pe√ßas "
        "t√©cnicas necess√°rias aos procedimentos de contrata√ß√£o p√∫blica."
    )
    par = doc.add_paragraph(texto)
    par.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY


def criar_tabela_cabecalho(doc):
    tabela = doc.add_table(rows=4, cols=4)
    tabela.style = 'Table Grid'

    tabela.cell(0, 0).text = "√ìRG√ÉO:"
    tabela.cell(0, 1).text = "DEPARTAMENTO ESTADUAL DE TR√ÇNSITO DE MATO GROSSO ‚Äì DETRAN-MT"
    tabela.cell(0, 2).text = "MATR√çCULA:"
    tabela.cell(0, 3).text = "246679"

    tabela.cell(1, 0).text = "UNIDADE OR√áAMENT√ÅRIA:"
    tabela.cell(1, 1).text = "19301"
    tabela.cell(1, 2).text = "TELEFONE:"
    tabela.cell(1, 3).text = "(65) 3615-4811"

    tabela.cell(2, 0).text = "SETOR REQUISITANTE (UNIDADE/SETOR/DEPTO):"
    tabela.cell(2, 1).merge(tabela.cell(2, 3))
    tabela.cell(2, 1).text = "COORDENADORIA DE TECNOLOGIA DA INFORMA√á√ÉO"

    tabela.cell(3, 0).text = "RESPONS√ÅVEL PELA DEMANDA:"
    tabela.cell(3, 1).text = "DANILO VIEIRA DA CRUZ"
    tabela.cell(3, 2).text = "E-MAIL:"
    tabela.cell(3, 3).text = "danilocruz@detran.mt.gov.br"


# ===========================
# üî• Fun√ß√£o principal
# ===========================

def gerar_dfd(descricao, tipo_objeto, forma_contratacao, estudo_tecnico, plano_contratacao):
    doc = Document()

    configurar_estilo(doc)
    adicionar_cabecalho(doc)
    adicionar_rodape(doc)
    adicionar_conceitos_gerais(doc)

    # ======== T√çTULO DO DOCUMENTO ========
    titulo = doc.add_paragraph("DOCUMENTO DE FORMALIZA√á√ÉO DA DEMANDA (DFD)")
    titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = titulo.runs[0]
    run.bold = True
    run.font.size = Pt(14)
    run.font.name = 'Calibri'

    doc.add_paragraph()
    criar_tabela_cabecalho(doc)
    doc.add_paragraph()

    # ======= 1 - OBJETO =======
    doc.add_paragraph("1 - OBJETO (SOLU√á√ÉO PRELIMINAR):").runs[0].bold = True

    opcoes_objeto = {
        "Material de consumo": "(X)" if tipo_objeto == "consumo" else "( )",
        "Material permanente": "(X)" if tipo_objeto == "permanente" else "( )",
        "Equipamento de TI": "(X)" if tipo_objeto == "ti" else "( )",
        "Servi√ßo n√£o continuado": "(X)" if tipo_objeto == "servico_nao" else "( )",
        "Servi√ßo continuado sem dedica√ß√£o exclusiva de m√£o de obra": "(X)" if tipo_objeto == "servico_sem_exclusiva" else "( )",
        "Servi√ßo continuado com dedica√ß√£o exclusiva de m√£o de obra": "(X)" if tipo_objeto == "servico_com_exclusiva" else "( )",
    }
    for texto, marcado in opcoes_objeto.items():
        doc.add_paragraph(f" {marcado} {texto}")

    doc.add_paragraph()

    # ======= 2 - DESCRI√á√ÉO =======
    doc.add_paragraph("2 - DESCRI√á√ÉO SUCINTA DO OBJETO:").runs[0].bold = True
    doc.add_paragraph(descricao)
    doc.add_paragraph()

    # ======= 3 - FORMA DE CONTRATA√á√ÉO =======
    doc.add_paragraph("3 - FORMA DE CONTRATA√á√ÉO SUGERIDA:").runs[0].bold = True

    formas = {
        "Modalidades da Lei n¬∫ 14.133/21": "(X)" if forma_contratacao == "lei14133" else "( )",
        "Utiliza√ß√£o √† ARP - √ìrg√£o Participante": "(X)" if forma_contratacao == "arp" else "( )",
        "Ades√£o √† ARP de outro √ìrg√£o": "(X)" if forma_contratacao == "adesao" else "( )",
        "Dispensa/Inexigibilidade": "(X)" if forma_contratacao == "dispensa" else "( )",
    }

    for texto, marcado in formas.items():
        doc.add_paragraph(f" {marcado} {texto}")

    doc.add_paragraph()

    # ======= 4 - ESTUDO T√âCNICO =======
    doc.add_paragraph("4 - NECESSIDADE DE ESTUDO T√âCNICO PRELIMINAR E AN√ÅLISE DE RISCOS:").runs[0].bold = True

    doc.add_paragraph(f" (X) {estudo_tecnico}" if estudo_tecnico == "N√ÉO" else f" (X) SIM")
    doc.add_paragraph("Justificativa: N√£o se aplica.")
    doc.add_paragraph()

    # ======= 5 - PLANO DE CONTRATA√á√ïES =======
    doc.add_paragraph("5 - OS OBJETOS A SEREM ADQUIRIDOS/CONTRATADOS EST√ÉO PREVISTOS NO PLANO DE CONTRATA√á√ïES ANUAL:").runs[0].bold = True

    doc.add_paragraph(f" (X) {plano_contratacao}" if plano_contratacao == "SIM" else f" (X) N√ÉO")
    doc.add_paragraph("Justificativa: N√£o se aplica.")

    doc.add_paragraph()

    # ======= DATA E ASSINATURA =======
    data = datetime.now().strftime("Cuiab√°-MT, %d de %B de %Y")
    data_par = doc.add_paragraph(data)
    data_par.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    doc.add_paragraph("\n\n")
    assinatura = doc.add_paragraph("DANILO VIEIRA DA CRUZ")
    assinatura.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    cargo = doc.add_paragraph("RESPONS√ÅVEL PELA A√á√ÉO NO PTA")
    cargo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    nome_arquivo = f"DFD_DETRANMT_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    doc.save(nome_arquivo)
    print(f"‚úÖ Documento '{nome_arquivo}' criado com sucesso!")


# ===========================
# üî• FLUXO INTERATIVO
# ===========================

def fluxo_interativo():
    print("Informe os dados para gerar o DFD.\n")
    item = input("Item: ").strip()
    quantidade = input("Quantidade: ").strip()
    finalidade = input("Finalidade ou descri√ß√£o resumida: ").strip()

    print("\nEscolha o tipo de objeto:")
    print("[1] Material de consumo")
    print("[2] Material permanente")
    print("[3] Equipamento de TI")
    print("[4] Servi√ßo n√£o continuado")
    print("[5] Servi√ßo sem dedica√ß√£o exclusiva de m√£o de obra")
    print("[6] Servi√ßo com dedica√ß√£o exclusiva de m√£o de obra")
    tipo = input("Digite o n√∫mero: ").strip()
    tipos = {
        "1": "consumo",
        "2": "permanente",
        "3": "ti",
        "4": "servico_nao",
        "5": "servico_sem_exclusiva",
        "6": "servico_com_exclusiva"
    }
    tipo_objeto = tipos.get(tipo, "consumo")

    print("\nEscolha a forma de contrata√ß√£o:")
    print("[1] Modalidades da Lei n¬∫ 14.133/21")
    print("[2] Utiliza√ß√£o √† ARP - √ìrg√£o Participante")
    print("[3] Ades√£o √† ARP de outro √ìrg√£o")
    print("[4] Dispensa/Inexigibilidade")
    forma = input("Digite o n√∫mero: ").strip()
    formas = {
        "1": "lei14133",
        "2": "arp",
        "3": "adesao",
        "4": "dispensa"
    }
    forma_contratacao = formas.get(forma, "lei14133")

    estudo_tecnico = "N√ÉO"
    plano_contratacao = "SIM"

    # ==== Prompt para Ollama ====
    prompt = f"""
Voc√™ √© um assistente que gera textos formais para documentos oficiais de requisi√ß√£o de materiais do DETRAN-MT.

Por favor, escreva uma descri√ß√£o clara, formal e objetiva para justificar a aquisi√ß√£o de {quantidade} unidades do item '{item}', 
que ser√° utilizado para {finalidade}.

O texto deve seguir o padr√£o institucional, com linguagem t√©cnica, direta e adequada para documentos p√∫blicos de aquisi√ß√£o.
"""

    print("\nüß† Gerando descri√ß√£o com o modelo...\n")
    descricao_gerada = gerar_descricao_ollama(prompt)

    if descricao_gerada:
        gerar_dfd(descricao_gerada, tipo_objeto, forma_contratacao, estudo_tecnico, plano_contratacao)
    else:
        print("‚ùå N√£o foi poss√≠vel gerar a descri√ß√£o com Ollama.")


if __name__ == "__main__":
    fluxo_interativo()
